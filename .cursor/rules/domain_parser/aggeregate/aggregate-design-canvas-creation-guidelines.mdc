---
description: When reading the event storming diagram and creating the aggregate design map.
globs: 
---
# Custom Instruction Prompt: Create the Aggregate Design Canvas

Follow the instructions below to create an "Aggregate Design Canvas" that captures the following sections.

**General points to note:**
- only format it according to these instructions using clear markdown.
- The aggregate name (in the **Name** section), command names (in the **Handled Commands** section), and event names (in the **Created Events** section) must be written in **English**.
- All other text must be written in **Japanese**.
- here for a sample: [sample-aggregate-design-map.mdc](mdc:.cursor/rules/sample-aggregate-design-map.mdc)

---

1. **Name**  
   - Give your aggregate a good name. In some domains it makes sense to include as part of the name the length of a cycle, or some other indication of the life span of the aggregate.

2. **Description**  
   - Summarise the main responsibilities and purpose of the aggregate. Itâ€™s a good idea to include the reasons why such boundaries were chosen and tradeoffs that were made compared to other designs.

3. **State Transitions**  
   - **Express using mermaid notation**  
   - Usually the aggregate goes through explicit state transitions, that impact the way it can be interacted with. Too many transitions might indicate that process boundaries weren't modelled properly and can be split. Very naive / simple transitions might indicate that the aggregate is anaemic and that logic was pushed out to services. In this section of the canvas list the possible states or draw a small transition diagram.
   - **Important:** In the state transition diagram, the **state names** must match the generated event names, and the **transition actions** must match the handled command names.

4. **Enforced Invariants & Corrective Policies**  
   - One of the main jobs of the aggregate is to enforce business invariants. These invariants protect business logic. Listing the main ones in this section will make sure that you agree on the responsibilities that the aggregate has. A large number of enforced invariants can indicate high local complexity of the aggregate implementation.
   - If you decide to change the boundaries of the aggregate and relax some of the invariants (for example to reduce the chance of concurrency conflict), then some extra business logic might be required to correct some of the inconsistencies. In the context of this canvas, we call this logic corrective policies. A large number of such policies might indicate that the business logic was pushed outside of the aggregate, which can increase the complexity of implementation.
   - Listing on the canvas both Invariants and Corrective Policies will make design trade-offs explicit and will help you decide whether the boundaries you decided on are useful or not.

5. **Handled Commands & Created Events**  
   - In this section you list all the commands that the aggregate is capable of handling and all events that will be created as a result. It might be a good idea to create connectors between them in order to validate that you are not missing any of the building blocks.
   - express it in the form of a table as follows.
   | Handled Command  | Created Event     |
   |------------------|-------------------|
   | Command1      | Event1      |
   | Command2     | Event2    |

6. Throughput

- Evaluate the likelihood of concurrency conflicts for a single aggregate instance.  
- Estimate the average and maximum command handling rate, as well as the number of clients issuing commands.  
- Use these metrics to assess the risk of conflicts and potential trade-offs.
- express it in the form of a table as follows.
   |                           | Average | Maximum |
   |---------------------------|---------|---------|
   | **Command handling rate** | `<avg_commands_per_day>` | `<max_commands_per_day>` |
   | **Total number of clients** | `<avg_clients>` | `<max_clients>` |
   | **Concurrency conflict chance** | `<low/medium/high>` | `<low/medium/high>` |

7. Size

- Estimate the size of the aggregate based on the number of events per instance.  
- Consider event granularity and growth rate to evaluate performance impacts.  
- If the number of events is large, consider using snapshots to mitigate performance issues.
- express it in the form of a table as follows.
   |                           | Average | Maximum |
   |---------------------------|---------|---------|
   | **Event growth rate** | `<avg_events_per_day>` | `<max_events_per_day>` |
   | **Lifetime of a single instance** | `<avg_lifetime>` | `<max_lifetime>` |
   | **Number of events persisted** | `<small/medium/large>` | `<small/medium/large>` |


Ensure that each section is clearly labeled and well-structured in markdown format.
