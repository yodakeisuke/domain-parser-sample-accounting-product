---
description: Example of Address term documentation in natural language
globs: Address.md
---
# Address Natural Language Example

## Complete Example: Address.md

```markdown
# 住所（Address）

## 概要
配送先となる住所です

## 関連する用語
- 都道府県（Prefecture）
- 住所詳細（DetailedAddress）

## 情報構造
### 住所の分類
- **有効な住所（Valid）**
    - **国内住所（Domestic）**
        - 都道府県
        - 住所詳細
    - **海外住所（Overseas）**
        - 住所詳細（都道府県は持たない）
- **無効な住所（Invalid）**
    - 都道府県（nullable）
    - 住所詳細
    - 無効理由

### 導出プロパティ
- `isDomestic()`: 国内住所かどうかを判定
- `isValid()`: 有効な住所かどうかを判定
- `display()`: 住所の表示形式を提供

## 状態遷移
```mermaid
stateDiagram-v2
    [*] --> Valid.Domestic : 都道府県あり
    [*] --> Valid.Overseas : 都道府県なし
    [*] --> Invalid : 検証エラー
    
    Invalid --> Valid.Domestic : verify(都道府県あり)
    Invalid --> Valid.Overseas : verify(都道府県なし)
    
    Valid.Domestic --> Valid.Domestic : 既に有効
    Valid.Overseas --> Valid.Overseas : 既に有効
```

## 生成と変換
### 文字列からの生成（from）
- 文字列からの変換
  - 「県」&「住所」の文字列情報

## ビジネスルール
### 住所詳細の検証
- 住所詳細は必須（空文字は不可）
- 前後の空白は自動的にトリミング

### 都道府県の解析
- 都道府県が空欄の場合は海外住所として扱う
- 入力された都道府県名は有効な都道府県である必要がある
- 前後の空白は自動的にトリミング

### 住所の生成
- 都道府県が指定されている場合は国内住所
- 都道府県が指定されていない場合は海外住所
```

## 記述のポイント

### 1. 概要
- 「配送先となる住所」という業務上の用途を明記
- 技術的な詳細は含まない

### 2. 情報構造
- **状態と分類の混在例**:
  - Valid/Invalid は「状態」（検証により変化可能）
  - Domestic/Overseas は「分類」（Valid内での固定的な種類）
- 階層構造で関係性を表現
- nullableは業務要件として明記

### 3. 状態遷移図
- 業務フローを視覚的に表現
- `verify`は業務上の「住所確認」操作
- 初期状態からの分岐も明記

### 4. ビジネスルール
- 各ルールを業務の観点から記述
- 「空欄の場合は海外住所として扱う」など、業務上の解釈を明記
- 技術的な処理（トリミング）も業務要件として記述

### 5. 表示形式の例
導出プロパティの`display()`で以下のような表示を想定：
- 国内住所: 「東京都 渋谷区道玄坂1-1-1」
- 海外住所: 「海外 123 Main St, New York」
- 無効住所: 「不正な住所: 渋谷区 (都道府県が不正です)」

## 良い記述例と悪い記述例

### ✅ 良い例
- 「都道府県が空欄の場合は海外住所として扱う」
- 「住所詳細は必須」
- 「配送先となる住所」

### ❌ 悪い例
- 「Result型で返す」（技術的詳細）
- 「sealed classで実装」（実装詳細）
- 「Stringをtrim()する」（技術用語）

## チェックリスト

- [ ] 業務担当者が読んで理解できるか
- [ ] 技術的な用語を使っていないか
- [ ] 業務上の文脈が明確か
- [ ] 図表で視覚的に表現しているか
- [ ] 具体例があるか