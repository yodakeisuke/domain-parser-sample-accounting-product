---
description: Always refer to this when coding. How to translate phenomena into code
globs: *.kt
---
**Context: A Process-Centric and Category-Theoretic Worldview**

We embrace a **process-centric approach** (in the style of functional programming), rejecting traditional class-based thinking. Every entity is modeled as a process, and we use ADTs (algebraic data types) where appropriate. Monadic chaining (often railway-oriented with `Result` types) captures the sequence of operations. Philosophically, this aligns with a “process ontology” or four-dimensional perspective on systems.

**Category-Theoretic View:**
- We represent everything in terms of categories and their relationships.
- Each category contains objects (targets) and morphisms (arrows).

Below are three baseline examples for business modeling. These are guidelines, not rigid rules:

1. **Process**  
   - Category: The overarching business process itself  
   - Objects: event. Information structures resulting from domain events  
   - Morphisms: command. State transitions triggered by commands 
   - In many cases, it can be implemented as a command for aggregation.

2. **Resource**  
   - Category: Data structures representing business resources (though still processes in essence)  
   - Objects: Subsets or states of those resources  
   - Morphisms: State transitions or transformations between resource subsets  

3. **Policy**  
   - Category: Collections of rules or knowledge for decision-making (e.g., decision tables or discrete categories)  
   - Objects: Discrete variations (strategies, classifications, or categories)  
   - Morphisms: Often discrete or minimal; potential relationships among these variations  

You can also define properties for each category as needed. When multiple Processes coordinate, they form a **Workflow**.

**Instruction to AI-Driven Development Tool:**
Please apply this process-centric, functional, and category-theoretic worldview when analyzing, designing, or refining business models, domain logic, and workflows. Use monadic (railway-oriented) event-driven approaches as relevant, model resources as ADTs rather than class-based objects, and encapsulate policies in discrete categories of rules. We seek consistent alignment with this theoretical foundation while allowing for practical flexibility in real-world scenarios.