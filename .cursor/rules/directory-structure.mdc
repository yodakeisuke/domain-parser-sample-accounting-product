---
description: When creating or searching for files.
globs: 
---
# AI Coding Agent: Project Directory Structure Instructions

This document defines a modular project directory structure designed for clear separation of concerns and ease of use by LLM models and coding agents. All instructions and examples are provided in English for maximum readability.

## Directory Structure Overview

src/main/kotlin/
├── {subdomain}/              # Each subdomain (e.g., product, order)
│   ├── model/
│   │   ├── command/
│   │   │   └── {aggregate}/   # Each aggregate for the command model
│   │   │       ├── Event.kt         # Event type definitions
│   │   │       ├── Command.kt       # Command type definitions
│   │   │       ├── Aggregate.kt     # Aggregate state and behavior
│   │   │       ├── Repository.kt
│   │   │       └── InMemoryRepository.kt
│   │   ├── readmodel/
│   │   │   ├── {Subdomain}ReadModel.kt
│   │   │   └── {Subdomain}Query.kt
│   │   └── type/
│   │       └── {TypeDefinition}.kt
│   └── flow/
│       ├── {Subdomain}Process.kt
│       └── error/
│           └── {Subdomain}ProcessError.kt
├── common/                   # Shared elements among subdomains
│   ├── model/
│   │   └── type/
│   │       └── {CommonTypeDefinition}.kt
│   └── error/
│       └── {CommonError}.kt

---

## Key Guidelines

1. **Language Consistency:**
   - All instructions and code examples are in English for clarity and uniformity.

2. **Subdomain Modularity:**
   - The project is segmented by subdomains (e.g., product, order). Each subdomain contains its own models and flows.
   - Within each subdomain:
     - **Model Layer:**
       - **Command:**
         - `Event.kt`: Defines all possible events in the aggregate
         - `Command.kt`: Defines all command types that can be executed
         - `Aggregate.kt`: Contains aggregate state definitions and command handling logic
         - Repository implementations for persistence
       - **Read Model:** Contains read models and query objects.
       - **Type Definitions:** Holds domain-specific type definitions.
     - **Flow Layer:**
       - Manages process logic and error handling specific to the subdomain.

3. **Common Components:**
   - Shared code, such as common types and error definitions, are stored under the `common` directory to promote reuse across subdomains.

4. **Scalability and Maintainability:**
   - The structure is designed to scale. When adding new subdomains or functionality, maintain the same layout to ensure consistency.
   - This separation of concerns simplifies code generation, testing, and maintenance.

5. **Readability for LLM Models and Agents:**
   - The clear, modular design ensures that each component's role is easily understood, facilitating automated code generation and integration.

---

## Usage Instructions

- **Template Adoption:** Use this directory structure as a template when starting new projects. Ensure that each new subdomain follows the established layout.
- **Code Generation:** When generating code, reference the specific sections (command, read model, flow, or common) to align with the architecture.
- **Future Expansion:** Modify and extend the structure as needed while keeping the core principles of modularity and clarity intact.

---

This markdown document provides a comprehensive and easy-to-read guideline for setting up and maintaining the project's directory structure, ensuring effective collaboration with LLM models and coding agents.
